package greendao;

import java.util.List;
import greendao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table MESSAGE.
 */
public class Message {

    private Long id;
    private String Type;
    private String Campus;
    private String ClassRoom;
    private String CreatedBy;
    private java.util.Date CreatedDate;
    private String Status;
    private java.util.Date SentDate;
    private String MessageBody;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MessageDao myDao;

    private List<messageReceivers> recipients;

    public Message() {
    }

    public Message(Long id) {
        this.id = id;
    }

    public Message(Long id, String Type, String Campus, String ClassRoom, String CreatedBy, java.util.Date CreatedDate, String Status, java.util.Date SentDate, String MessageBody) {
        this.id = id;
        this.Type = Type;
        this.Campus = Campus;
        this.ClassRoom = ClassRoom;
        this.CreatedBy = CreatedBy;
        this.CreatedDate = CreatedDate;
        this.Status = Status;
        this.SentDate = SentDate;
        this.MessageBody = MessageBody;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMessageDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getType() {
        return Type;
    }

    public void setType(String Type) {
        this.Type = Type;
    }

    public String getCampus() {
        return Campus;
    }

    public void setCampus(String Campus) {
        this.Campus = Campus;
    }

    public String getClassRoom() {
        return ClassRoom;
    }

    public void setClassRoom(String ClassRoom) {
        this.ClassRoom = ClassRoom;
    }

    public String getCreatedBy() {
        return CreatedBy;
    }

    public void setCreatedBy(String CreatedBy) {
        this.CreatedBy = CreatedBy;
    }

    public java.util.Date getCreatedDate() {
        return CreatedDate;
    }

    public void setCreatedDate(java.util.Date CreatedDate) {
        this.CreatedDate = CreatedDate;
    }

    public String getStatus() {
        return Status;
    }

    public void setStatus(String Status) {
        this.Status = Status;
    }

    public java.util.Date getSentDate() {
        return SentDate;
    }

    public void setSentDate(java.util.Date SentDate) {
        this.SentDate = SentDate;
    }

    public String getMessageBody() {
        return MessageBody;
    }

    public void setMessageBody(String MessageBody) {
        this.MessageBody = MessageBody;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<messageReceivers> getRecipients() {
        if (recipients == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            messageReceiversDao targetDao = daoSession.getMessageReceiversDao();
            List<messageReceivers> recipientsNew = targetDao._queryMessage_Recipients(id);
            synchronized (this) {
                if(recipients == null) {
                    recipients = recipientsNew;
                }
            }
        }
        return recipients;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetRecipients() {
        recipients = null;
    }

//    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

//    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

//    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
