package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import greendao.Message;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MESSAGE.
*/
public class MessageDao extends AbstractDao<Message, Long> {

    public static final String TABLENAME = "MESSAGE";

    /**
     * Properties of entity Message.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Type = new Property(1, String.class, "Type", false, "TYPE");
        public final static Property Campus = new Property(2, String.class, "Campus", false, "CAMPUS");
        public final static Property ClassRoom = new Property(3, String.class, "ClassRoom", false, "CLASS_ROOM");
        public final static Property CreatedBy = new Property(4, String.class, "CreatedBy", false, "CREATED_BY");
        public final static Property CreatedDate = new Property(5, java.util.Date.class, "CreatedDate", false, "CREATED_DATE");
        public final static Property Status = new Property(6, String.class, "Status", false, "STATUS");
        public final static Property SentDate = new Property(7, java.util.Date.class, "SentDate", false, "SENT_DATE");
        public final static Property MessageBody = new Property(8, String.class, "MessageBody", false, "MESSAGE_BODY");
    };

    private DaoSession daoSession;


    public MessageDao(DaoConfig config) {
        super(config);
    }
    
    public MessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MESSAGE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TYPE' TEXT," + // 1: Type
                "'CAMPUS' TEXT," + // 2: Campus
                "'CLASS_ROOM' TEXT," + // 3: ClassRoom
                "'CREATED_BY' TEXT," + // 4: CreatedBy
                "'CREATED_DATE' INTEGER," + // 5: CreatedDate
                "'STATUS' TEXT," + // 6: Status
                "'SENT_DATE' INTEGER," + // 7: SentDate
                "'MESSAGE_BODY' TEXT);"); // 8: MessageBody
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MESSAGE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Message entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Type = entity.getType();
        if (Type != null) {
            stmt.bindString(2, Type);
        }
 
        String Campus = entity.getCampus();
        if (Campus != null) {
            stmt.bindString(3, Campus);
        }
 
        String ClassRoom = entity.getClassRoom();
        if (ClassRoom != null) {
            stmt.bindString(4, ClassRoom);
        }
 
        String CreatedBy = entity.getCreatedBy();
        if (CreatedBy != null) {
            stmt.bindString(5, CreatedBy);
        }
 
        java.util.Date CreatedDate = entity.getCreatedDate();
        if (CreatedDate != null) {
            stmt.bindLong(6, CreatedDate.getTime());
        }
 
        String Status = entity.getStatus();
        if (Status != null) {
            stmt.bindString(7, Status);
        }
 
        java.util.Date SentDate = entity.getSentDate();
        if (SentDate != null) {
            stmt.bindLong(8, SentDate.getTime());
        }
 
        String MessageBody = entity.getMessageBody();
        if (MessageBody != null) {
            stmt.bindString(9, MessageBody);
        }
    }

    @Override
    protected void attachEntity(Message entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Message readEntity(Cursor cursor, int offset) {
        Message entity = new Message( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Campus
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ClassRoom
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // CreatedBy
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // CreatedDate
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Status
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // SentDate
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // MessageBody
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Message entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCampus(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setClassRoom(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreatedBy(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCreatedDate(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setStatus(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSentDate(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setMessageBody(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Message entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Message entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
